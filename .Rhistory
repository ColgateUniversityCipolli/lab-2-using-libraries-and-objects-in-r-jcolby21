install.packages("tinytex")
library(tinytex)
install_tinytex()
install.packages("knitr")
Hello World!
install.packages(aRtsy)
install.packages(aRtsy)
install.packages{aRtsy}
install.packages(aRtsy)
install.packages(aRtsy)
install.packages("aRtsy")
library("aRtsy")
help("aRtsy")
<<echo=FALSE,fig.dim=c(4,4)>>=
<<echo=FALSE,fig.dim=c(4,4)>>=
set.seed(1)
canvas_collatz(colors = colorPalette("tuscany3"))
set.seed(1313)
canvas_collatz(colors = colorPalette("tuscany3"))
canvas_collatz(colors = colorPalette("vrolik4"), background = "#dbdbdb", n=72, angle.even = 0.0145, angle.odd = -0.05)
canvas_collatz(colors = colorPalette("vrolik4"), background = "#fafafa", n=400, angle.even = 1.145, angle.odd = -10.05)
citation("aRtsy")
\citep{"aRtsy"}
\citep{aRtsy}
\citep{}
\citep{"aRtsy"}
\citep{artsy}
\citep{artsy}
\citep{artsy}
num.vector=0:10
num.vector=0:10
print(num.vector)
algebra.vector= 2^(num.vector+1)+2^(num.vector-1)
print(algebra.vector)
which(algebra.vector)==40
which(algebra.vector==40)
algebra.vector(5)
algebra.vector= 2^(num.vector+1)+2^(num.vector-1)
algebra.vector(5)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x.value=algebra.vector(5)
algebra.vector= 2^(num.vector+1)+2^(num.vector-1)
x.value=algebra.vector(5)
algebra.vector= 2^(num.vector+1)+2^(num.vector-1)
x.value=algebra.vector[5]
print(x.value)
x.value=num.vector[5]
print(x.value)
which(algebra.vector==41)
citation("aRtsy")
\bibliography{references}
(delta.x <- (b-a)/n.rect)
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
trap.midpoints = a + 1:99*(delta.x)
(trap.area = sum(0.5*((a+b)+2*(trap.midpoints)))
trap.area
trap.midpoints = a + 1:99*(delta.x)
trap.area = sum(0.5*((a+b)))
trap.area
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
clear
clc
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
trap.midpoints = a + 1:99*(delta.x)
trap.area = sum(0.5*delta.x*(integrand(a)+2*(integrand(trap.midpoints)+integrand(b)))
trap.area
trap.area = sum(0.5*(delta.x)*(integrand(a)+2*(integrand(trap.midpoints)+integrand(b))))
trap.area
View(integrand)
rm()
rm(list=ls)
rm(list=ls())
integrand <- function(x){
f <- 7 - 2 * x^2
return(f)
}
trap.midpoints = a + 1:99*(delta.x)
a <- 0
b <- 2
n.rect <- 100
(delta.x <- (b-a)/n.rect)
trap.midpoints = a + 1:99*(delta.x)
trap.midpoints
trap.area = sum(0.5*(delta.x)*(integrand(a)+2*(integrand(trap.midpoints))+integrand(b))))
trap.area = sum(0.5*(delta.x)*(integrand(a)+2*(integrand(trap.midpoints))+integrand(b)))
trap.area
trap.area = sum(0.5*(delta.x)*(2*(integrand(trap.midpoints))))
0.5*delta.x*integrand(a)
0.5*delta.x*integrand(b)
trap.area = sum(0.5*(delta.x)*(integrand(a)) + 0.5*(delta.x)*(2*(integrand(trap.midpoints)))+ 0.5*(delta.x)*(integrand(b))
trap.area
trap.area = sum(0.5*(delta.x)*(integrand(a)),0.5*(delta.x)*(2*(integrand(trap.midpoints))),0.5*(delta.x)*(integrand(b))
trap.area
# Midpoints for the trapezoidal rule
trap.midpoints <- a + (1:(n.rect - 1)) * delta.x
trap.area <- sum(0.5 * delta.x * (integrand(a) + 2 * sum(integrand(trap.midpoints)) + integrand(b)))
trap.area
album.track.no.wav<-file.name[str_count(file.name, ".wav")>0]
file.name=list.files(subset.wav[i])
rm(list=ls)
rm=(list=ls())
subset.wav[1]
matching_subdirs <- list.dirs("Music", recursive = TRUE) #All sub directories in the directories
rm=(list=ls())
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE) #All sub directories in the directories
matching_subdirs <- list.dirs("Music", recursive = TRUE) #All sub directories in the directories
char.count=str_count(matching_subdirs, "/") #counts the number of "/" in each subdirectory containg music
index.wav=which(char.count==2)#returns indexes of wav files
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE) #All sub directories in the directories
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE) #All sub directories in the directories
char.count=str_count(matching_subdirs, "/") #counts the number of "/" in each subdirectory containg music
index.wav=which(char.count==2)#returns indexes of wav files
subset.wav=matching_subdirs[index.wav]#creates a new vector containing only the .wav files
code.to.process=vector()#creates an empty vector
file.name=list.files(subset.wav[1])#names of files located within each album subdirectory
album.track=paste(subset.wav[1],file.name[1], sep ="/") #combines the album directory and the current track title
album.track.no.wav=str_sub(album.track[1], start=1, end=length(album.track[1])-6)#removes the .wav at the end of the file
split.str=str_split(album.track.no.wav[1],"-") #splits the album track with no wav to a vector
track.name=split.str[[1]][3]#pulls the track name out
artist.name=split.str[[1]][2]#pulls the artist name out
split.two=str_split(album.track[1],"/") #splits album track with wav at the "/" symbol
album.name=split.two[[1]][3]#pulls the album name out
desired.output=paste(artist.name[1],album.name[1],track.name[1],".json",sep="-")#creates the desired output
code.to.process=paste('"',streaming_extractor_music.exe,'"','"',album.track[1],'"','"',desired.output[1],'"', sep="") #returns code to process
matching_subdirs <- list.dirs("Music", recursive = TRUE)
# only thing to c
code.to.process=c(code.to.process, paste("streaming_extractor_music.exe",'"',album.track[length(album.track)],'"','"',desired.output[length(desired.output)], '"'))
matching_subdirs <- list.dirs("Music", recursive = TRUE)
matching_subdirs
char.count=str_count(matching_subdirs, "/") #counts the number of "/" in each subdirectory containg music
matching_subdirs <- list.dirs("Music", recursive = TRUE)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
install.packages("jsonlite")
setwd("~/lab-2-using-libraries-and-objects-in-r-jcolby21")
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE) #All sub directories in the directories
char.count=str_count(matching_subdirs, "/") #counts the number of "/" in each subdirectory containg music
index.wav=which(char.count==2)#returns indexes of wav files
subset.wav=matching_subdirs[index.wav]#creates a new vector containing only the .wav files
code.to.process=vector()#creates an empty vector
file.name=list.files(subset.wav[1])#names of files located within each album subdirectory
album.track=paste(subset.wav[1],file.name[1], sep ="/") #combines the album directory and the current track title
album.track.no.wav=str_sub(album.track[1], start=1, end=length(album.track[1])-6)#removes the .wav at the end of the file
split.str=str_split(album.track.no.wav[1],"-") #splits the album track with no wav to a vector
track.name=split.str[[1]][3]#pulls the track name out
artist.name=split.str[[1]][2]#pulls the artist name out
split.two=str_split(album.track[1],"/") #splits album track with wav at the "/" symbol
album.name=split.two[[1]][3]#pulls the album name out
desired.output=paste(artist.name[1],album.name[1],track.name[1],".json",sep="-")#creates the desired output
code.to.process=paste('"',streaming_extractor_music.exe,'"','"',album.track[1],'"','"',desired.output[1],'"', sep="") #returns code to process
setwd("~/lab-2-using-libraries-and-objects-in-r-jcolby21")
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
char.count = str_count(matching_subdirs, "/") # Counts the number of "/" in each subdirectory
index.wav = which(char.count == 2) # Returns indexes of wav files
subset.wav = matching_subdirs[index.wav] # Creates a new vector containing only the .wav files
code.to.process = vector() # Creates an empty vector
for(i in 1:length(subset.wav)) {
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
char.count = str_count(matching_subdirs, "/") # Counts the number of "/" in each subdirectory
index.wav = which(char.count == 2) # Returns indexes of wav files
subset.wav = matching_subdirs[index.wav] # Creates a new vector containing only the .wav files
code.to.process = vector() # Creates an empty vector
for(i in 1:length(subset.wav)) {
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
code.to.process = c(code.to.process, command) # Adding the command to the vector
}
}
print(code.to.process)
for(i in 1:length(subset.wav)) {
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
code.to.process = c(code.to.process, command) # Adding the command to the vector
}
}
for(i in 1:length(subset.wav)) {
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
code.to.process = c(code.to.process, command) # Adding the command to the vector
}
}
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
code.to.process = c(code.to.process, command) # Adding the command to the vector
}
file.name=list.files(subset.wav[1])#names of files located within each album subdirectory
album.name = split.two[3] # Pulling the album name out
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
char.count = str_count(matching_subdirs, "/") # Counts the number of "/" in each subdirectory
index.wav = which(char.count == 2) # Returns indexes of wav files
subset.wav = matching_subdirs[index.wav] # Creates a new vector containing only the .wav files
code.to.process = vector() # Creates an empty vector
for(i in 1:length(subset.wav)) {
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
code.to.process = c(code.to.process, command) # Adding the command to the vector
}
}
print(code.to.process)
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
setwd("~/lab-2-using-libraries-and-objects-in-r-jcolby21")
setwd("~/lab-2-using-libraries-and-objects-in-r-jcolby21")
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
char.count = str_count(matching_subdirs, "/") # Counts the number of "/" in each subdirectory
index.wav = which(char.count == 2) # Returns indexes of wav files
subset.wav = matching_subdirs[index.wav] # Creates a new vector containing only the .wav files
code.to.process = vector() # Creates an empty vector
for(i in 1:length(subset.wav)) {
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
code.to.process = c(code.to.process, command) # Adding the command to the vector
}
}
print(code.to.process)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
setwd("~/lab-2-using-libraries-and-objects-in-r-jcolby21")
library(stringr)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
char.count=str_count(matching_subdirs, "/")
index.wav=which(char.count==2)#returns indexes of wav files
matching_subdirs
file.name=list.files(subset.wav[i])
setwd("~/lab-2-using-libraries-and-objects-in-r-jcolby21")
source("~/lab-2-using-libraries-and-objects-in-r-jcolby21/jcolbylab2.R", echo=TRUE)
matching_subdirs <- list.dirs("Music", recursive = TRUE)
char.count = str_count(matching_subdirs, "/") # Counts the number of "/" in each subdirectory
index.wav = which(char.count == 2) # Returns indexes of wav files
subset.wav = matching_subdirs[index.wav] # Creates a new vector containing only the .wav files
code.to.process = vector() # Creates an empty vector
for(i in 1:length(subset.wav)) {
file.name = list.files(subset.wav[i]) # Names of files in the current album subdirectory
album.track = paste(subset.wav[i], file.name, sep = "/") # Combines album directory with the track title
for(j in 1:length(album.track)) {
# Removing ".wav" from the file names
album.track.no.wav = str_sub(album.track[j], start = 1, end = nchar(album.track[j]) - 4)
# Splitting the album track name into components
split.str = str_split(album.track.no.wav, "-")[[1]]
track.name = split.str[3] # Pulling the track name out
artist.name = split.str[2] # Pulling the artist name out
split.two = str_split(album.track[j], "/")[[1]]
album.name = split.two[3] # Pulling the album name out
desired.output = paste(artist.name, album.name, track.name, ".json", sep = "-") # Creating desired output
command = paste('"streaming_extractor_music.exe" "', album.track[j], '" "', desired.output, '"', sep = "")
code.to.process = c(code.to.process, command) # Adding the command to the vector
}
}
print(code.to.process)
writeLines(code.to.process, "batfile.txt")
(writeLines(code.to.process, "batfile.txt"))
batfile.txt
"batfile.txt"
writeLines(code.to.process, "batfile.txt")
file_path="batfile.txt"
writeLines(code.to.process, file_path)
(writeLines(code.to.process, file_path))
writeLines(code.to.process, "batfile.txt")
split_name <- strsplit(desired.output, " - ")[[1]]
# Extract artist, album, and track
artist <- split_name[1]
album <- split_name[2]
track <- gsub(".json", "", split_name[3])  # Removing .json from the track name
# Print the extracted values
cat("Artist:", artist, "\n")
cat("Album:", album, "\n")
cat("Track:", track, "\n")
split_name <- strsplit(desired.output, "-")[[1]]
# Extract artist, album, and track
artist <- split_name[1]
album <- split_name[2]
track <- gsub(".json", "", split_name[3])  # Removing .json from the track name
# Print the extracted values
cat("Artist:", artist, "\n")
cat("Album:", album, "\n")
cat("Track:", track, "\n")
library(jsonlite)
json_data <- fromJSON(desired.output)
print(code.to.process)
split_name <- strsplit(code.to.process, "-")[[1]] # Split the file name
split_name
for (i in 1:length(code.to.process){
for (i in 1:length(code.to.process)) {
split_name <- strsplit(code.to.process[i], "-")[[1]] # Get the first element of the list
artist = c(artist, split_name[2])  # Access the 2nd element
album = c(album, split_name[4])    # Access the 4th element
track = c(track, split_name[5])    # Access the 5th element
}
track
album=[]
json_data <- fromJSON(code.to.process)
album=()
album=vector()
track=vector()
artist=vector()
for (i in 1:length(code.to.process)) {
split_name <- strsplit(code.to.process[i], "-")[[1]] # Get the first element of the list
artist = c(artist, split_name[2])  # Access the 2nd element
album = c(album, split_name[4])    # Access the 4th element
track = c(track, split_name[5])    # Access the 5th element
}
json_data <- fromJSON(code.to.process[1])
code.to.process
json_data <- fromJSON(code.to.process[1][[1]])
json_data <- fromJSON(code.to.process[1][[2]])
json_data <- fromJSON()
json_data <- fromJSON("batfile.txt")
json_data <- fromJSON(file.name) #could not figure out what to input here so I just continued
json_data <- fromJSON(subset.wav) #could not figure out what to input here so I just continued
json_data <- fromJSON(album.track) #could not figure out what to input here so I just continued
#could not figure out what to input here so I just continued
str(json_data)
json_data <- fromJSON("path/to/your/file/The Front Bottoms - Talon Of The Hawk - Au Revoir (Adios).json")
json_data <- fromJSON("The Front Bottoms - Talon Of The Hawk - Au Revoir (Adios).json")
json_file=list.dirs("The Front Bottoms - Talon Of The Hawk - Au Revoir (Adios).json")
json_file=list.dirs("The Front Bottoms - Talon Of The Hawk - Au Revoir (Adios)")
json_file=list.dirs("The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json", recursive=TRUE)
json_data <- fromJSON("The Front Bottoms - Talon Of The Hawk - Au Revoir (Adios).json")
json_data <- fromJSON(json_file)
